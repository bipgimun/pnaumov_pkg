package xxpha.oracle.apps.icx.sn1041.server;

import java.sql.SQLException;

import java.util.Hashtable;

import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;
import oracle.jbo.domain.Char;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;

import oracle.sql.NUMBER;

import xxpha.oracle.apps.icx.sn1041.utils.Sn1041Utils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SessionAMImpl extends OAApplicationModuleImpl {
    private final String CLASS_NAME;

    private Sn1041Utils utils = Sn1041Utils.getInstance();

    /**This is the default constructor (do not remove)
     */
    public SessionAMImpl() {
        super();
        this.CLASS_NAME = this.getClass().getName();
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxpha.oracle.apps.icx.sn1041.server", 
                                             "SessionAMLocal");
    }

    /**Container's getter for SessionVO1
     */
    public SessionVOImpl getSessionVO1() {
        return (SessionVOImpl)findViewObject("SessionVO1");
    }

    public void initSession(String pIsFirstTime) {
        //Sn1041Utils utils = Sn1041Utils.getInstance();

        SessionVOImpl sessionVO = getSessionVO1();

        Hashtable dic = new Hashtable();

        sessionVO.initQuery(dic);


        try {
            sessionVO.setWhereClauseParam(0, 
                                          new Char(((OADBTransaction)getTransaction()).getUserId()));
            sessionVO.setWhereClauseParam(1, 
                                          new Char(((OADBTransaction)getTransaction()).getResponsibilityId()));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        sessionVO.executeQuery();

        SessionVORowImpl row = (SessionVORowImpl)sessionVO.first();

        if (row != null) {
            //row.setUserId(new Number(((OADBTransaction)getTransaction()).getUserId()));
            //row.setRespId(new Number(((OADBTransaction)getTransaction()).getResponsibilityId()));
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));

            row.setSessionDate(new Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));


            if (pIsFirstTime.equals("Y")) {
                long organizationId = utils.getProfileStoreId(this);
                utils.writeDiagnostics(this, CLASS_NAME + ".initSession (old)", 
                                       "organizationId =" + organizationId, 
                                       OAFwkConstants.PROCEDURE);
                //row.setOrganizationName(organizationName);
                if (organizationId != -1) {
                    row.setStoreId(new Number(organizationId));
                    //row.setNewRowState(Row.);
                }
            }

        }

        else {
            row = (SessionVORowImpl)sessionVO.createRow();

            row.setSId(new Number(((OADBTransaction)getTransaction()).getSequenceValue("XXPHA.XXPHA_SN1041_SESSION_S")));
            row.setUserId(new Number(((OADBTransaction)getTransaction()).getUserId()));
            row.setRespId(new Number(((OADBTransaction)getTransaction()).getResponsibilityId()));
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));
            row.setSessionDate(new Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));

            long organizationId = utils.getProfileStoreId(this);
            utils.writeDiagnostics(this, CLASS_NAME + ".initSession (new)", 
                                   "organizationId =" + organizationId, 
                                   OAFwkConstants.PROCEDURE);
            //row.setOrganizationName(organizationName);
            if (organizationId != -1)
                row.setStoreId(new Number(organizationId));

            sessionVO.insertRow(row);
            row.setNewRowState(Row.STATUS_INITIALIZED);
        }

        getTransaction().commit();
        //System.out.println("initSession - OK!");
    }

    public void initSessionEam(Long pWipEntityId) {
        long lWipEntityID = pWipEntityId.longValue();
        long organizationId = utils.getWipOrganizationId(this, lWipEntityID);

        SessionVOImpl sessionVo = getSessionVO1();

        //sessionEamVo.setWhereClause("user_id = :1\n" + "and RESP_ID = :2");

        try {
            sessionVo.setWhereClauseParam(0, 
                                          new Char(((OADBTransaction)getTransaction()).getUserId()));
            sessionVo.setWhereClauseParam(1, 
                                          new Char(((OADBTransaction)getTransaction()).getResponsibilityId()));
        } catch (SQLException e) {
            e.printStackTrace();
        }


        sessionVo.executeQuery();

        SessionVORowImpl row = (SessionVORowImpl)sessionVo.first();


        if (row != null) {
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));
            row.setSessionDate(new Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));
            row.setWipEntityId(new Number(pWipEntityId.longValue()));
            if (organizationId != -1) {
                row.setStoreId(new Number(organizationId));
                row.setOrganizationName(utils.getStoreName(this, 
                                                           organizationId));
            }
        }

        else {
            row = (SessionVORowImpl)sessionVo.createRow();

            row.setSId(new Number(((OADBTransaction)getTransaction()).getSequenceValue("XXPHA.XXPHA_SN1041_SESSION_S")));
            row.setUserId(new Number(((OADBTransaction)getTransaction()).getUserId()));
            row.setRespId(new Number(((OADBTransaction)getTransaction()).getResponsibilityId()));
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));
            row.setSessionDate(new Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));
            row.setWipEntityId(new Number(pWipEntityId.longValue()));
            if (organizationId != -1) {
                row.setStoreId(new Number(organizationId));
                row.setOrganizationName(utils.getStoreName(this, 
                                                           organizationId));
            }

            sessionVo.insertRow(row);
            //row.setNewRowState(Row.STATUS_INITIALIZED);            
        }

        getTransaction().commit();
    }

    public void apply() {
        getTransaction().commit();
    }

    public void storeChange() {
        getTransaction().commit();
    }
}
