package xxpha.oracle.apps.icx.sn1041.server;

import java.io.Serializable;

import java.sql.Connection;

import java.util.ArrayList;
import java.util.Date;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAFwkConstants;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.server.OAViewObjectImpl;

import oracle.jbo.RowSetIterator;
import oracle.jbo.Transaction;
import oracle.jbo.domain.Number;


import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleTypes;

import oracle.sql.ARRAY;
import oracle.sql.ArrayDescriptor;
import oracle.sql.NUMBER;

import xxpha.oracle.apps.icx.sn1041.lov.server.OperationsVOImpl;
import xxpha.oracle.apps.icx.sn1041.lov.server.RequisitionTypesEAMVOImpl;
import xxpha.oracle.apps.icx.sn1041.lov.server.RequisitionTypesVOImpl;
import xxpha.oracle.apps.icx.sn1041.lov.server.SubInvVOImpl;
import xxpha.oracle.apps.icx.sn1041.lov.server.WorkOrdersVOImpl;
import xxpha.oracle.apps.icx.sn1041.utils.ResultForInvoce;
import xxpha.oracle.apps.icx.sn1041.utils.Sn1041Utils;


//import oracle.jbo.domain.Date;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SearchAMImpl extends OAApplicationModuleImpl {
    private Sn1041Utils utils = Sn1041Utils.getInstance();

    /**This is the default constructor (do not remove)
     */
    public SearchAMImpl() {
        super();
        this.CLASS_NAME = this.getClass().getName();
    }

    private Number organizationId;
    public final String CLASS_NAME;


    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("xxpha.oracle.apps.icx.sn1041.server", 
                                             "SearchAMLocal");
    }

    /**Container's getter for SearchResultsVO1
     */
    public SearchResultsVOImpl getSearchResultsVO1() {
        return (SearchResultsVOImpl)findViewObject("SearchResultsVO1");
    }


    public void fillSearchTable(String searchString, long receiver, 
                                String useElastic) {
        fillSearchTable(searchString, receiver, 
                        getOADBTransaction().getOrgId(), useElastic);
    }

    public void fillSearchTable(String searchString, long receiver, 
                                long pOrgId, String useElastic) {

        //Number storeReceiver = 
        //   (Number)getParametersVO1().getCurrentRow().getAttribute("StoreReceiver");
        Number storeReceiver = new Number(receiver);

        String stmt = 
            "begin\n" + "XXPHA_SN1041_PKG.get_search_tbl(\n" + "p_search_str => :1, p_oe_id => :2, p_store_receiver=>:3, p_use_elastic=>:4);\n" + 
            "end;";
        OracleCallableStatement call = null;

        try {
            call = 
(OracleCallableStatement)getOADBTransaction().getJdbcConnection().prepareCall(stmt);
            call.setString(1, searchString);
            NUMBER oeId = new NUMBER(pOrgId);
            call.setNUMBER(2, oeId);
            call.setNUMBER(3, storeReceiver);
            call.setString(4, useElastic);
            call.execute();

        } catch (Exception e) {
            throw new OAException(e.getLocalizedMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }

        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".fillSearchTable", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
    }

    public void doSearch(String searchString, String useElastic) {
        long wipEntityId = utils.getCurrentWipEntityId(this);
        long currentStoreId = -1;
        long orgId = getOADBTransaction().getOrgId();

        if (wipEntityId > 0) {
            currentStoreId = utils.getWipOrganizationId(this, wipEntityId);
            if (orgId < 0) {
                orgId = utils.getOrgIdByOrganizationId(this, currentStoreId);
            }
        } else {
            currentStoreId = utils.getCurrentStoreId(this);
        }
        long currentCSId = utils.getCurrentCSId(this, currentStoreId);

        fillSearchTable(searchString, currentStoreId, orgId, useElastic);

        getSearchResultsVO1().initQuery(orgId, currentStoreId, currentCSId, 
                                        Boolean.FALSE);
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".doSearch", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
    }


    //Перебираем выбранные строки и для каждой строки получаем статус (не получилось вернуть коллекцию)
    //По итогу перебора всех строк формируем сообщения, чтобы бросить его в СерчРезульЦО и вывелось сообщение пользователю

    public ArrayList<OAException> addSelectedItems(Number orgatizationId) {
        byte resType = OAException.CONFIRMATION;
        boolean flagSelectRow = false;

        long curCSID = utils.getCurrentCSId(this);

        SearchResultsVOImpl searchRes = getSearchResultsVO1();

        RowSetIterator rsIter = searchRes.getRowSetIterator();

        ArrayList<String> messList = new ArrayList<String>();
        ArrayList<OAException> returnMesList = new ArrayList<OAException>();

        rsIter.reset();

        String stmt = 
            "begin\n" + ":1:= XXPHA_SN1041_PKG.add_selected_items(:2, :3, :4, :5, :6, :7);\n" + 
            "end;";

        OracleCallableStatement call = null;

        OracleConnection conn = 
            (OracleConnection)getOADBTransaction().getJdbcConnection();
        while (rsIter.hasNext()) {
            SearchResultsVORowImpl r = (SearchResultsVORowImpl)rsIter.next();
            String isSelected = r.getSelectedItem();
            String itemCode = r.getItemCode();
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".addSelectedItems", 
                                                       "isSelected " + 
                                                       isSelected, 
                                                       OAFwkConstants.PROCEDURE);
            if (isSelected != null && isSelected.equals("Y")) {
                String dectivation = r.getDeactivation();
                if (dectivation != null) {
                    Number csAvailableQuantity = r.getCsAvailableQuantity();
                    Number pairCSQuantity = 
                        new Number(utils.getPairCSQuantity(this, curCSID, 
                                                           r.getInventoryItemId().longValue()));
                    if ((csAvailableQuantity == null || 
                         csAvailableQuantity.getValue() <= 0) && 
                        (pairCSQuantity == null || 
                         pairCSQuantity.getValue() <= 0)) {
                        MessageToken[] tokens = 
                        { new MessageToken("ITEM_CODE", itemCode) };
                        OAException ex = 
                            new OAException("XXPHA", "XXPHA_SN1041_DEACT_NO_AVAIL_CS", 
                                            tokens);
                        throw ex;
                    }
                }
                flagSelectRow = true;
                try {

                    call = (OracleCallableStatement)conn.prepareCall(stmt);
                    call.registerOutParameter(1, OracleTypes.NUMBER);

                    call.setNUMBER(2, r.getSearchItemId());
                    call.setNUMBER(3, 
                                   new NUMBER(getOADBTransaction().getOrgId()));
                    call.setNUMBER(4, orgatizationId);
                    call.setNUMBER(5, new NUMBER(1));
                    call.setNUMBER(6, r.getCsAvailableQuantity());
                    call.registerOutParameter(7, OracleTypes.VARCHAR);

                    call.execute();

                    //Опасность только возрастет! Для всех выводих сообщений один тип
                    int num = call.getInt(1);
                    if (num == 1 && resType != OAException.ERROR)
                        resType = OAException.WARNING;
                    else if (num == 2) {
                        resType = OAException.ERROR;
                    }
                    if (call.getString(7) != null)
                        messList.add(call.getString(7));


                    Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                               CLASS_NAME + 
                                                               ".addSelectedItems", 
                                                               " Status row = " + 
                                                               call.getNUMBER(1).toString() + 
                                                               "" + 
                                                               call.getString(7), 
                                                               OAFwkConstants.PROCEDURE);

                    call.close();
                } catch (Exception e) {
                    e.printStackTrace();

                    Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                               CLASS_NAME + 
                                                               ".addSelectedItems", 
                                                               " Error!" + 
                                                               e.getMessage(), 
                                                               OAFwkConstants.PROCEDURE);

                    throw new OAException(e.getMessage(), OAException.ERROR);
                } finally {
                    try {
                        if (call != null) {
                            call.close();
                        }
                    } catch (Exception e) {
                        throw new OAException(e.getLocalizedMessage(), 
                                              OAException.ERROR);
                    }
                }
            }
        }
        rsIter.closeRowSetIterator();
        getTransaction().commit();

        //проверка если не выбрана ни одна позиция
        if (!flagSelectRow) {
            OAException mainMessage = 
                new OAException("XXPHA", "XXPHA_SN1041_NOT_SELECTED_ITEM", 
                                null, OAException.WARNING, null);
            returnMesList.add(mainMessage);
        }

        for (String mes: messList) {
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".addSelectedItems", 
                                                       "mes = " + mes, 
                                                       OAFwkConstants.PROCEDURE);
            OAException msg = new OAException(mes, resType);
            returnMesList.add(msg);
        }


        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".addSelectedItems", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
        return returnMesList;
    }


    /*
    public ArrayList<OAException> addAnalogSelectedItems(Number orgatizationId) {
        byte resType = OAException.CONFIRMATION;
        boolean flagSelectRow = false;


        AnalogVOImpl searchRes = getAnalogVO1();

        RowSetIterator rsIter = searchRes.getRowSetIterator();

        ArrayList<String> messList = new ArrayList<String>();
        ArrayList<OAException> returnMesList = new ArrayList<OAException>();

        rsIter.reset();

        String stmt =
            "begin\n" + ":1:= XXPHA_SN1041_PKG.add_selected_items(:2, :3, :4, :5, :6);\n" +
            "end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn =
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            while (rsIter.hasNext()) {
                AnalogVORowImpl r =
                    (AnalogVORowImpl)rsIter.next();
                String isSelected = r.getSelected();
                Sn1041Utils.getInstance().writeDiagnostics(this,
                                                           CLASS_NAME +
                                                           ".addAnalogSelectedItems",
                                                           "isSelected " +
                                                           isSelected,
                                                           OAFwkConstants.PROCEDURE);

                if (isSelected != null && isSelected.equals("Y")) {
                    flagSelectRow = true;

                    call = (OracleCallableStatement)conn.prepareCall(stmt);
                    call.registerOutParameter(1, OracleTypes.NUMBER);

                    call.setNUMBER(2, r.getRelatedItemId());
                    call.setNUMBER(3,
                                   new NUMBER(getOADBTransaction().getOrgId()));
                    call.setNUMBER(4, orgatizationId);
                    call.setNUMBER(5, new NUMBER(1));
                    call.registerOutParameter(6,
                                              OracleTypes.VARCHAR);

                    call.execute();

                    //Опасность только возрастет! Для всех выводих сообщений один тип
                    int num = call.getInt(1);
                    if (num == 1 && resType != OAException.ERROR)
                        resType = OAException.WARNING;
                    else if (num == 2) {
                        resType = OAException.ERROR;
                    }

                    if (call.getString(6) != null)
                        messList.add(call.getString(6));

                    Sn1041Utils.getInstance().writeDiagnostics(this,
                                                               CLASS_NAME +
                                                               ".addAnalogSelectedItems",
                                                               " Status row = " +
                                                               call.getNUMBER(1).toString() +
                                                               "" +
                                                               call.getString(6),
                                                               OAFwkConstants.PROCEDURE);

                    call.close();
                }
            }
            rsIter.closeRowSetIterator();

            //проверка если не выбрана ни одна позиция
            if (!flagSelectRow) {
                resType = OAException.ERROR;
                messList.add("Not select any item");
            }

            for (String mes: messList) {
                OAException msg = new OAException(mes, resType);
                returnMesList.add(msg);
            }

            getTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();

            Sn1041Utils.getInstance().writeDiagnostics(this,
                                                       CLASS_NAME + ".addSelectedItems",
                                                       " Error!" +
                                                       e.getMessage(),
                                                       OAFwkConstants.PROCEDURE);

            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(),
                                      OAException.ERROR);
            }
        }

        Sn1041Utils.getInstance().writeDiagnostics(this,
                                                   CLASS_NAME + ".addSelectedItems",
                                                   " - Ok!",
                                                   OAFwkConstants.PROCEDURE);

        return returnMesList;
    }
*/


    public void initParameters(Number oeId, Boolean executeQuery) {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".initParameters", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);
        ParametersVOImpl paramsVO = getParametersVO1();
        paramsVO.initQuery(oeId, executeQuery);
    }

    public void initSearchResults() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".initSearchResults", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);
        SearchResultsVOImpl searchRes = getSearchResultsVO1();

        long currentStoreId = 
            Sn1041Utils.getInstance().getCurrentStoreId(this);
        long currentCSId = Sn1041Utils.getInstance().getCurrentCSId(this);
        long orgId = Sn1041Utils.getInstance().getOrgIdByOrganizationId(this, currentStoreId); 

        searchRes.initQuery(orgId, currentStoreId, currentCSId, Boolean.TRUE);
    }

    public void initSearchResultsEAM(Long pWipEntityId) {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".initSearchResultsEAM", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".initSearchResultsEAM", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);

        SearchResultsVOImpl searchRes = getSearchResultsVO1();

        long wipEntityId = pWipEntityId.longValue();

        long currentStoreId = 
            Sn1041Utils.getInstance().getWipOrganizationId(this, wipEntityId);
        long currentCSId = 
            Sn1041Utils.getInstance().getCurrentCSId(this, currentStoreId);
        long orgId = Sn1041Utils.getInstance().getOrgIdByOrganizationId(this, currentStoreId);     

        searchRes.initQuery(orgId, currentStoreId, currentCSId, Boolean.TRUE);
    }

    /**Container's getter for StoreListVO1
     */
    public OAViewObjectImpl getStoreListVO1() {
        return (OAViewObjectImpl)findViewObject("StoreListVO1");
    }


    public Boolean deleteSelectedLine(String lineNum) {
        String stmt = 
            "begin :1 := XXPHA_SN1041_PKG.delete_selected_items(line_num => :2); end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn = 
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            call = (OracleCallableStatement)conn.prepareCall(stmt);

            call.registerOutParameter(1, OracleTypes.NUMBER);
            call.setString(2, lineNum);
            call.execute();

            getTransaction().commit();

            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".deleteSelectedLine", 
                                                       " - Ok!", 
                                                       OAFwkConstants.PROCEDURE);

            return true;

        } catch (Exception e) {
            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }
    }

    public Boolean deleteDraft() {
        String stmt = "begin :1 := XXPHA_SN1041_PKG.delete_draft; end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn = 
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            call = (OracleCallableStatement)conn.prepareCall(stmt);

            call.registerOutParameter(1, OracleTypes.NUMBER);

            call.execute();

            getTransaction().commit();

            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".deleteDraft", 
                                                       " - Ok!", 
                                                       OAFwkConstants.PROCEDURE);

            return true;

        } catch (Exception e) {
            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }
    }

    public void applyChanges() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".applyChanges", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);
        recomendReqType();

        getTransaction().commit();

        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".applyChanges", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
    }

    public void rollbackChanges() {
        Transaction txn = getTransaction();

        if (txn.isDirty()) {
            txn.rollback();
        }
    }

    public void recomendReqType() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".recomendReqType", 
                                                   " - Start!", 
                                                   OAFwkConstants.PROCEDURE);
        Table5SourceVOImpl vo = getTable5SourceVO1();
        Table5SourceVORowImpl row = null;
        //int fetchedRowCount = vo.getFetchedRowCount();


        RowSetIterator ri = vo.createRowSetIterator("RecomendReqType");

        /*
        if (fetchedRowCount > 0) {
            ri.setRangeStart(0);
            ri.setRangeSize(fetchedRowCount);

            for (int i = 0; i < fetchedRowCount; i++) {
                row = (Table5SourceVORowImpl)ri.getRowAtRangeIndex(0);
                String reqType = row.getRequisitionType();
                System.out.println("i=" + i + "reqType = " + reqType);
            }
            ri.closeRowSetIterator();
        }
        */
        int i = 0;
        String iPurchIndexName = 
            ((OADBTransaction)getTransaction()).getProfile("XXPHA_RGP001_INDEX_POSITIONS_IPURCH");
        while (ri.hasNext()) {
            ri.next();
            row = (Table5SourceVORowImpl)ri.getCurrentRow();
            String reqType = row.getRequisitionType();
            System.out.println("i=" + i + " reqType = " + reqType);
            if (reqType == null || "".equals(reqType)) {
                Number availQuantity = row.getCsAvailableQuantity();
                double fAvail = 
                    (availQuantity != null) ? availQuantity.getValue() : 0;
                Number reqQuantity = row.getQuantity();
                double fQuantity = 
                    (reqQuantity != null) ? reqQuantity.getValue() : 0;

                String deactivation = row.getDeactivation();
                String indexName = row.getIndexName();
                if (iPurchIndexName.equals(indexName)) {
                    row.setRequisitionType("6");
                } else {
                    if (fAvail >= fQuantity) {
                        //Из наличного количества
                        row.setRequisitionType("2");
                    } else if (fAvail < fQuantity && deactivation == null) {
                        row.setRequisitionType("1");
                    }
                }
            }

            i++;
        }
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".recomendReqType", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);

    }

    /**Container's getter for SessionAM1
     */
    public ApplicationModuleImpl getSessionAM1() {
        return (ApplicationModuleImpl)findApplicationModule("SessionAM1");
    }

    public void initSession(String pIsFirstTime) {
        OAApplicationModuleImpl amSession = 
            (OAApplicationModuleImpl)getSessionAM1();

        Serializable[] initParams = { pIsFirstTime };
        Class[] initParamTypes = { String.class };
        amSession.invokeMethod("initSession", initParams, initParamTypes);

        //this.getTransaction().commit();
    }


    public void initSessionEam(Long pWipEntityId) {
        utils.writeDiagnostics(this, CLASS_NAME + ".initSession", 
                               "----- START -----", OAFwkConstants.PROCEDURE);
        utils.writeDiagnostics(this, CLASS_NAME + ".initSession", 
                               "pWipEntityId = " + pWipEntityId, 
                               OAFwkConstants.PROCEDURE);

        SessionAMImpl amSessionEam = (SessionAMImpl)getSessionAM1();
        amSessionEam.initSessionEam(pWipEntityId);
    }


    /*
    public void initSessionEam(Long pWipEntityId) {
        long lWipEntityID = pWipEntityId.longValue();
        long organizationId = utils.getWipOrganizationId(this, lWipEntityID);

        SessionVOImpl sessionVo = getSessionVO1();

        //sessionEamVo.setWhereClause("user_id = :1\n" + "and RESP_ID = :2");

        try {
            sessionVo.setWhereClauseParam(0,
                                          new Char(((OADBTransaction)getTransaction()).getUserId()));
            sessionVo.setWhereClauseParam(1,
                                          new Char(((OADBTransaction)getTransaction()).getResponsibilityId()));
        } catch (SQLException e) {
            e.printStackTrace();
        }


        sessionVo.executeQuery();

        SessionVORowImpl row = (SessionVORowImpl)sessionVo.first();


        if (row != null) {
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));
            row.setSessionDate(new oracle.jbo.domain.Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));
            row.setWipEntityId(new Number(pWipEntityId.longValue()));
            if (organizationId != -1) {
                row.setStoreId(new Number(organizationId));
                row.setOrganizationName(utils.getStoreName(this,
                                                           organizationId));
            }
        }

        else {
            row = (SessionVORowImpl)sessionVo.createRow();

            row.setSId(new Number(((OADBTransaction)getTransaction()).getSequenceValue("XXPHA.XXPHA_SN1041_SESSION_S")));
            row.setUserId(new Number(((OADBTransaction)getTransaction()).getUserId()));
            row.setRespId(new Number(((OADBTransaction)getTransaction()).getResponsibilityId()));
            row.setLoginId(new Number(((OADBTransaction)getTransaction()).getLoginId()));
            row.setSessionDate(new oracle.jbo.domain.Date(((OADBTransaction)getTransaction()).getCurrentDBDate()));
            row.setWipEntityId(new Number(pWipEntityId.longValue()));
            if (organizationId != -1) {
                row.setStoreId(new Number(organizationId));
                row.setOrganizationName(utils.getStoreName(this,
                                                           organizationId));
            }

            sessionVo.insertRow(row);
            //row.setNewRowState(Row.STATUS_INITIALIZED);
        }

        getTransaction().commit();
    }
    */

    public void applySession() {
        OAApplicationModuleImpl amSession = 
            (OAApplicationModuleImpl)getSessionAM1();
        amSession.invokeMethod("apply");
    }


    /**Container's getter for RequisitionTypesVO1
     */
    public RequisitionTypesVOImpl getRequisitionTypesVO1() {
        return (RequisitionTypesVOImpl)findViewObject("RequisitionTypesVO1");
    }


    //Добавил параметр для EAM

    public ResultForInvoce createReq(String subInv, Date needByDate, 
                                     String EAMFlag) {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".createReq", 
                                                   "start subInv = " + subInv, 
                                                   OAFwkConstants.PROCEDURE);
        Connection connect = null;
        OracleCallableStatement ocs = null;


        Table5SourceVOImpl searchRes = getTable5SourceVO1();
        ArrayList<Number> selectedRows = new ArrayList<Number>();
        RowSetIterator rsIter = searchRes.getRowSetIterator();
        //RowSetIterator rsIter = searchRes.createRowSetIterator("XXX");
        rsIter.reset();

        while (rsIter.hasNext()) {


            Table5SourceVORowImpl r = (Table5SourceVORowImpl)rsIter.next();

            //r.getAttribute("isSelect2");

            String isSelected = r.getIsSelected();

            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".createReq", 
                                                       "isSelected =" + 
                                                       isSelected, 
                                                       OAFwkConstants.PROCEDURE);


            if (isSelected != null && isSelected.equals("Y")) {
                selectedRows.add(r.getReqItemId());
                Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                           CLASS_NAME + ".createReq", 
                                                           "getReqItemId = " + 
                                                           r.getReqItemId(), 
                                                           OAFwkConstants.PROCEDURE);
            }
        }
        rsIter.closeRowSetIterator();


        try {
            connect = getOADBTransaction().getJdbcConnection();
            String sql = 
                "BEGIN :1 := XXPHA_SN1041_LST_REQ_BSKT_PKG.main(:2, :3, :4, :5, :6 ); end; "; //для EAM
            ocs = (OracleCallableStatement)connect.prepareCall(sql);

            ArrayDescriptor des = 
                ArrayDescriptor.createDescriptor("FND_TABLE_OF_NUMBER", 
                                                 connect);
            Number[] l1 = new Number[selectedRows.size()];
            l1 = selectedRows.toArray(l1);

            ARRAY items = new ARRAY(des, connect, l1);


            ocs.registerOutParameter(1, OracleTypes.VARCHAR);
            ocs.setARRAY(2, items);
            ocs.setString(3, subInv);
            ocs.setDate(4, 
                        ((needByDate != null)) ? new java.sql.Date(needByDate.getTime()) : 
                        null);

            ocs.registerOutParameter(5, OracleTypes.VARCHAR);
            ocs.setString(6, EAMFlag); //для EAM
            ocs.executeUpdate();

            String resType = ocs.getString(1);
            String resDescr = ocs.getString(5);

            ResultForInvoce res = new ResultForInvoce(resType, resDescr);

            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".createReq", 
                                                       "resType = " + resType + 
                                                       ", resDescr = " + 
                                                       resDescr, 
                                                       OAFwkConstants.PROCEDURE);

            this.getTable5SourceVO1().executeQuery();
            markUnselectRows();

            return res;
        } catch (Exception e) {
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".createReq", 
                                                       "error = " + 
                                                       e.getStackTrace(), 
                                                       OAFwkConstants.PROCEDURE);

            throw new OAException(e.getMessage(), OAException.ERROR);

        } finally {
            try {
                ocs.close();
                //connect.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }

    }

    /**Container's getter for Table5SourceVO1
     */
    public Table5SourceVOImpl getTable5SourceVO1() {
        return (Table5SourceVOImpl)findViewObject("Table5SourceVO1");
    }


    public void setOrganizationId(Number organizationId) {
        this.organizationId = organizationId;
    }

    public Number getOrganizationId() {
        return organizationId;
    }

    public void markUnselectRows() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".markUnselectRows", 
                                                   "start", 
                                                   OAFwkConstants.PROCEDURE);

        Table5SourceVOImpl tblRes = this.getTable5SourceVO1();
        RowSetIterator rsIter = tblRes.getRowSetIterator();
        rsIter.reset();

        while (rsIter.hasNext()) {
            Table5SourceVORowImpl r = (Table5SourceVORowImpl)rsIter.next();
            //String isSelected = r.getSelectedItem();
            if (r.getReqLineId() != null) {
                Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                           CLASS_NAME + ".markUnselectRows", 
                                                           " mark row IsSelected=" + 
                                                           r.getIsSelected(), 
                                                           OAFwkConstants.PROCEDURE);
                r.setisReadOnly(Boolean.TRUE);
                r.setIsSelected("N");
                //r.setisRendered(Boolean.FALSE);   

                //r.setItemCode("ololo1");
            } else {
                r.setisReadOnly(Boolean.FALSE);
                //r.setisRendered(Boolean.TRUE);    
            }
        }

        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".markUnselectRows", 
                                                   "end", 
                                                   OAFwkConstants.PROCEDURE);


    }

    public void clearDraft() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".clearDraft", 
                                                   "start", 
                                                   OAFwkConstants.PROCEDURE);
    }


    public String haveDraft() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".haveDraft", 
                                                   "start", 
                                                   OAFwkConstants.PROCEDURE);

        String stmt = "begin :1 := XXPHA_SN1041_PKG.have_draft; end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn = 
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            call = (OracleCallableStatement)conn.prepareCall(stmt);

            call.registerOutParameter(1, OracleTypes.VARCHAR);

            call.execute();

            //getTransaction().commit();

            String hasDraft = call.getString(1);
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".haveDraft", 
                                                       " - hasDraft = " + 
                                                       hasDraft, 
                                                       OAFwkConstants.PROCEDURE);


            return hasDraft;

        } catch (Exception e) {
            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }
    }

    /**Container's getter for AnalogAM1
     */
    public ApplicationModuleImpl getAnalogAM1() {
        return (ApplicationModuleImpl)findApplicationModule("AnalogAM1");
    }

    /**Container's getter for AnalogVO1
     */
    public AnalogVOImpl getAnalogVO1() {
        return (AnalogVOImpl)findViewObject("AnalogVO1");
    }

    public void storeChange() {
        OAApplicationModule am = (OAApplicationModule)getSessionAM1();
        am.invokeMethod("storeChange");
    }

    /*
    public void initAnalogQuery(Long itemId, Boolean executeQuery) {
        long currentStoreId =
            Sn1041Utils.getInstance().getCurrentStoreId(this);
        long currentCSId = Sn1041Utils.getInstance().getCurrentCSId(this);

        Sn1041Utils.getInstance().writeDiagnostics(this,
                                                   CLASS_NAME + ".initQuery",
                                                   " currentStoreId = " +
                                                   currentStoreId,
                                                   OAFwkConstants.PROCEDURE);

        Sn1041Utils.getInstance().writeDiagnostics(this,
                                                   CLASS_NAME + ".initQuery",
                                                   " currentCSId = " +
                                                   currentCSId,
                                                   OAFwkConstants.PROCEDURE);

        getAnalogVO1().initQuery(itemId.longValue(), currentStoreId,
                                 currentCSId, executeQuery);
    }
*/
    /*
    public void addToSearch() {
        Sn1041Utils.getInstance().writeDiagnostics(this,
                                                   CLASS_NAME + ".addToSearch",
                                                   " Start !!! ",
                                                   OAFwkConstants.PROCEDURE);

        AnalogVOImpl analogVO = getAnalogVO1();
        ArrayList<Number> itemIds = new ArrayList<Number>();
        ArrayList<String> itemCodes = new ArrayList<String>();
        ArrayList<String> itemDesriptions = new ArrayList<String>();
        ArrayList<String> UOMs = new ArrayList<String>();

        RowSetIterator rsIter = analogVO.getRowSetIterator();
        rsIter.reset();

        while (rsIter.hasNext()) {


            AnalogVORowImpl r = (AnalogVORowImpl)rsIter.next();

            String isSelected = r.getSelected();

            Sn1041Utils.getInstance().writeDiagnostics(this,
                                                       CLASS_NAME + ".createReq",
                                                       "isSelected =" +
                                                       isSelected,
                                                       OAFwkConstants.PROCEDURE);


            if (isSelected != null && isSelected.equals("Y")) {
                itemIds.add(r.getRelatedItemId());
                itemCodes.add(r.getSegment1());
                itemDesriptions.add(r.getRelatedItemDescription());
                UOMs.add(r.getPrimaryUnitOfMeasure());
                Sn1041Utils.getInstance().writeDiagnostics(this,
                                                           CLASS_NAME + ".createReq",
                                                           "getRelatedItemId = " +
                                                           r.getRelatedItemId(),
                                                           OAFwkConstants.PROCEDURE);
            }
        }
        rsIter.closeRowSetIterator();


        String stmt =
            "begin\n" + ":1:= XXPHA_SN1041_PKG.Add_Analog(p_item_ids=>:2, p_item_codes=>:3,"+
            " p_item_descriptions=>:4,"+
            " p_uom=>:5"+
            ");\n" +
            "end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn =
                (OracleConnection)getOADBTransaction().getJdbcConnection();


            Number[] ids = new Number[itemIds.size()];
            ids = itemIds.toArray(ids);

            String[] codes = new String[itemCodes.size()];
            codes = itemCodes.toArray(codes);

            String[] descriptions = new String[itemDesriptions.size()];
            descriptions = itemDesriptions.toArray(descriptions);

            String[] saUOMs = new String[UOMs.size()];
            saUOMs = UOMs.toArray(saUOMs);

            ArrayDescriptor desIds =
                ArrayDescriptor.createDescriptor("FND_TABLE_OF_NUMBER", conn);
            ARRAY ids_array = new ARRAY(desIds, conn, ids);

            ArrayDescriptor desCodes =
                ArrayDescriptor.createDescriptor("FND_TABLE_OF_VARCHAR2_30",
                                                 conn);
            ARRAY codes_array = new ARRAY(desCodes, conn, codes);

            ArrayDescriptor desDescription =
                ArrayDescriptor.createDescriptor("FND_TABLE_OF_VARCHAR2_4000",
                                                 conn);
            ARRAY descriptions_array = new ARRAY(desDescription, conn, descriptions);

            ArrayDescriptor desUOMs =
                ArrayDescriptor.createDescriptor("FND_TABLE_OF_VARCHAR2_30",
                                                 conn);
            ARRAY UOMS_array = new ARRAY(desUOMs, conn, saUOMs);

            call = (OracleCallableStatement)conn.prepareCall(stmt);
            call.registerOutParameter(1, OracleTypes.NUMBER);
            call.setARRAY(2, ids_array);
            call.setARRAY(3, codes_array);
            call.setARRAY(4, descriptions_array);
            call.setARRAY(5, UOMS_array);


            call.execute();
        } catch (Exception e) {
            e.printStackTrace();

            Sn1041Utils.getInstance().writeDiagnostics(this,
                                                       CLASS_NAME + ".addSelectedItems",
                                                       " Error!" +
                                                       e.getMessage(),
                                                       OAFwkConstants.PROCEDURE);


            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(),
                                      OAException.ERROR);
            }
        }
    }
*/
    /**Container's getter for SessionAM1
     */
    /*
	public ApplicationModuleImpl getSessionAM1() {
        return (ApplicationModuleImpl)findApplicationModule("SessionAM1");
    }
	*/

    /**Container's getter for SubInvVO1
     */
    public SubInvVOImpl getSubInvVO1() {
        return (SubInvVOImpl)findViewObject("SubInvVO1");
    }


    public void selectSameTypeItem() {
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".selectSameTypeItem", 
                                                   "start", 
                                                   OAFwkConstants.PROCEDURE);

        Table5SourceVOImpl tblRes = this.getTable5SourceVO1();
        RowSetIterator rsIter = tblRes.getRowSetIterator();

        String reqType = null;
        String iStore = null;

        rsIter.reset();
        while (rsIter.hasNext()) {
            Table5SourceVORowImpl r = (Table5SourceVORowImpl)rsIter.next();
            //find first row and get rowtype
            if (r.getIsSelected() != null && r.getIsSelected().equals("Y")) {
                reqType = r.getRequisitionType();
                iStore = r.getSupplier();

                Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                           CLASS_NAME + ".selectSameTypeItem", 
                                                           " find reqType " + 
                                                           reqType, 
                                                           OAFwkConstants.PROCEDURE);
                break;
            }
        }

        //select all rows with this type 
        if (reqType != null) {
            rsIter.reset();
            while (rsIter.hasNext()) {
                Table5SourceVORowImpl r = (Table5SourceVORowImpl)rsIter.next();

                //For e-shop
                r.setIsSelected((r.getRequisitionType() != null && 
                                 r.getRequisitionType().equals(reqType) && 
                                 r.getReqLineId() == null && 
                                 (iStore == null || (r.getSupplier() != null && 
                                                     iStore.equals(r.getSupplier())))) ? 
                                "Y" : "N");

            }
        }


        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".selectSameTypeItem", 
                                                   "end", 
                                                   OAFwkConstants.PROCEDURE);


    }


    /**Container's getter for SubInvVO2
     */
    public SubInvVOImpl getSubInvVO2() {
        return (SubInvVOImpl)findViewObject("SubInvVO2");
    }

    public void initActiveCart() {
        ActiveCartVOImpl actCart = getActiveCartVO1();
        if (actCart != null) {
            if (!actCart.isExecuted())
                actCart.initQuery(Boolean.TRUE);
        }
    }


    public void refreshTable5VO() {
        String stmt = 
            "begin XXPHA_SN1041_LST_REQ_BSKT_PKG.refresh_req_table; end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn = 
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            call = (OracleCallableStatement)conn.prepareCall(stmt);
            call.execute();

            //getTransaction().commit();

        } catch (Exception e) {
            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }
    }

    public ArrayList<OAException> refreshPrice() {
        Sn1041Utils utils = Sn1041Utils.getInstance();
        utils.writeDiagnostics(this, CLASS_NAME + ".refreshPrice", 
                               "has invoked", OAFwkConstants.PROCEDURE);

        long currentOrgId = utils.getCurrentOrgId(this);


        String iPurchIndexName = 
            ((OADBTransaction)getTransaction()).getProfile("XXPHA_RGP001_INDEX_POSITIONS_IPURCH");

        ArrayList<OAException> returnMesList = new ArrayList<OAException>();

        ArrayList<String> vendorCodes = new ArrayList<String>();

        SearchResultsVOImpl searchRes = getSearchResultsVO1();
        RowSetIterator rsIter = searchRes.getRowSetIterator();

        rsIter.reset();
        while (rsIter.hasNext()) {
            SearchResultsVORowImpl r = (SearchResultsVORowImpl)rsIter.next();
            String isSelected = r.getSelectedItem();
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".refreshPrice", 
                                                       "isSelected " + 
                                                       isSelected, 
                                                       OAFwkConstants.PROCEDURE);
            if (isSelected != null && isSelected.equals("Y")) {
                //Проверка: позиция ИМ?
                String indexName = r.getIndexName();
                String itemCode = r.getItemCode();
                String catalogCode = r.getCatalogCode();
                if (itemCode == null)
                    itemCode = catalogCode;
                if (!indexName.equals(iPurchIndexName)) {
                    MessageToken[] tokens = 
                    { new MessageToken("ITEM_CODE", itemCode) };
                    OAException notISItemEx = 
                        new OAException("XXPHA", "XXPHA_SN1041_NOT_ISTORE_ITEM", 
                                        tokens);
                    throw notISItemEx;
                }

                //Проверка: цена == 0
                Number price = r.getPrice();
                if (price != null && !price.equals(0)) {
                    MessageToken[] tokens = 
                    { new MessageToken("ITEM_CODE", itemCode) };
                    OAException notNullPriceEx = 
                        new OAException("XXPHA", "XXPHA_SN1041_PRICE_NOT_NULL", 
                                        tokens);
                    throw notNullPriceEx;
                }

                vendorCodes.add(catalogCode);
            }
        }


        if (!vendorCodes.isEmpty()) {
            String stmt = 
                "begin\n" + " XXPHA_SN1041_PKG.Refresh_Price(p_org_id=>:1, p_vendor_codes=>:2," + 
                " x_out_messages=>:3" + ");\n" + "end;";
            OracleCallableStatement call = null;

            try {
                OracleConnection conn = 
                    (OracleConnection)getOADBTransaction().getJdbcConnection();
                String[] arrVendorCodes = new String[vendorCodes.size()];
                arrVendorCodes = vendorCodes.toArray(arrVendorCodes);
                ArrayDescriptor desVendorCodes = 
                    ArrayDescriptor.createDescriptor("FND_TABLE_OF_VARCHAR2_120", 
                                                     conn);
                ARRAY vendorCodes_array = 
                    new ARRAY(desVendorCodes, conn, arrVendorCodes);

                call = (OracleCallableStatement)conn.prepareCall(stmt);

                call.setNUMBER(1, new NUMBER(currentOrgId));
                call.setARRAY(2, vendorCodes_array);
                call.registerOutParameter(3, OracleTypes.ARRAY, 
                                          "FND_TABLE_OF_VARCHAR2_4000");
                call.execute();

                ARRAY messageArr = call.getARRAY(3);
                if (messageArr != null) {
                    String[] receivedArray = (String[])messageArr.getArray();
                    for (int i = 0; i < receivedArray.length; i++)
                        returnMesList.add(new OAException(receivedArray[i], 
                                                          OAException.INFORMATION));
                }
            } catch (Exception e) {
                e.printStackTrace();

                Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                           CLASS_NAME + ".addSelectedItems", 
                                                           " Error!" + 
                                                           e.getMessage(), 
                                                           OAFwkConstants.PROCEDURE);


                throw new OAException(e.getMessage(), OAException.ERROR);
            } finally {
                try {
                    call.close();
                } catch (Exception e) {
                    throw new OAException(e.getLocalizedMessage(), 
                                          OAException.ERROR);
                }
            }
        }

        utils.writeDiagnostics(this, CLASS_NAME + ".refreshPrice", "OK", 
                               OAFwkConstants.PROCEDURE);

        return returnMesList;
    }

    public void clearSearch() {
        String stmt = "begin XXPHA_SN1041_PKG.Clear_Search; end;";
        OracleCallableStatement call = null;

        try {
            OracleConnection conn = 
                (OracleConnection)getOADBTransaction().getJdbcConnection();

            call = (OracleCallableStatement)conn.prepareCall(stmt);
            call.execute();

            //getTransaction().commit();

        } catch (Exception e) {
            throw new OAException(e.getMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }
    }

    /**Container's getter for WorkOrdersVO1
     */
    public WorkOrdersVOImpl getWorkOrdersVO1() {
        return (WorkOrdersVOImpl)findViewObject("WorkOrdersVO1");
    }

    /**Container's getter for OperationsVO1
     */
    public OperationsVOImpl getOperationsVO1() {
        return (OperationsVOImpl)findViewObject("OperationsVO1");
    }


    public void wipEntityChange() {
        SessionAMImpl sessionAM = (SessionAMImpl)getSessionAM1();

        SessionVOImpl sesVO = sessionAM.getSessionVO1();
        SessionVORowImpl row = (SessionVORowImpl)sesVO.getCurrentRow();

        System.out.println("wipEntityChange.(sop) StoreId = " + 
                           row.getStoreId());

        long wipEntityId = row.getWipEntityId().longValue();
        System.out.println("wipEntityChange.(sop) WipEntityId = " + 
                           wipEntityId);

        initSessionEam(new Long(wipEntityId));

        long storeId = utils.getWipOrganizationId(this, wipEntityId);
        long orgId = utils.getOrgIdByOrganizationId(this, storeId);
        initParameters(new Number(orgId), Boolean.TRUE);

        getWorkOrderItems(new Long(wipEntityId));
    }

    public void getWorkOrderItems(Long pWipEntityId) {
        long lWipEntityId = pWipEntityId.longValue();
        long storeId = 
            Sn1041Utils.getInstance().getWipOrganizationId(this, lWipEntityId);
        long currentCSId = 
            Sn1041Utils.getInstance().getCurrentCSId(this, storeId);

        fillSearchTableEAM(lWipEntityId);
        
        long orgId = Sn1041Utils.getInstance().getOrgIdByOrganizationId(this, storeId);  

        getSearchResultsVO1().initQuery(orgId, storeId, currentCSId, Boolean.FALSE);
        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".getWorkOrderItems", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
    }

    public void fillSearchTableEAM(long pWipEntityId) {

        Number wipEntityId = new Number(pWipEntityId);

        String stmt = 
            "begin\n" + "XXPHA_SN1041_PKG.get_search_tbl_eam(\n" + "p_wip_entity_id => :1);\n" + 
            "end;";
        OracleCallableStatement call = null;

        try {
            call = 
(OracleCallableStatement)getOADBTransaction().getJdbcConnection().prepareCall(stmt);
            call.setNUMBER(1, wipEntityId);
            call.execute();

        } catch (Exception e) {
            throw new OAException(e.getLocalizedMessage(), OAException.ERROR);
        } finally {
            try {
                call.close();
            } catch (Exception e) {
                throw new OAException(e.getLocalizedMessage(), 
                                      OAException.ERROR);
            }
        }

        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".fillSearchTableEAM", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
    }

    public ArrayList<OAException> addSelectedItems(Long pWipEntityId) {
        byte resType = OAException.CONFIRMATION;
        boolean flagSelectRow = false;

        long wipEntityId = pWipEntityId.longValue();
        long storeId = utils.getWipOrganizationId(this, wipEntityId);
        long orgId = utils.getOrgIdByOrganizationId(this, storeId);

        SearchResultsVOImpl searchRes = getSearchResultsVO1();
        RowSetIterator rsIter = searchRes.getRowSetIterator();

        ArrayList<String> messList = new ArrayList<String>();
        ArrayList<OAException> returnMesList = new ArrayList<OAException>();

        rsIter.reset();

        String stmt = 
            "begin\n" + ":1:= XXPHA_SN1041_PKG.add_selected_items(p_search_item_id=>:2, p_oe_id=>:3," + 
            " p_organization_id=>:4, p_wip_entity_id=>:5, p_cs_quantity=>:6, x_messages=>:7);\n" + 
            "end;";

        OracleCallableStatement call = null;

        OracleConnection conn = 
            (OracleConnection)getOADBTransaction().getJdbcConnection();
        while (rsIter.hasNext()) {
            SearchResultsVORowImpl r = (SearchResultsVORowImpl)rsIter.next();
            String isSelected = r.getSelectedItem();
            String itemCode = r.getItemCode();
            utils.writeDiagnostics(this, CLASS_NAME + ".addSelectedItems", 
                                   "isSelected " + isSelected, 
                                   OAFwkConstants.PROCEDURE);
            if (isSelected != null && isSelected.equals("Y")) {
                String dectivation = r.getDeactivation();
                if (dectivation != null) {
                    Number csAvailableQuantity = r.getCsAvailableQuantity();
                    if (csAvailableQuantity == null || 
                        csAvailableQuantity.getValue() <= 0) {
                        MessageToken[] tokens = 
                        { new MessageToken("ITEM_CODE", itemCode) };
                        OAException ex = 
                            new OAException("XXPHA", "XXPHA_SN1041_DEACT_NO_AVAIL_CS", 
                                            tokens);
                        throw ex;
                    }
                }
                flagSelectRow = true;
                try {

                    call = (OracleCallableStatement)conn.prepareCall(stmt);
                    call.registerOutParameter(1, OracleTypes.NUMBER);

                    call.setNUMBER(2, r.getSearchItemId());
                    call.setNUMBER(3, new Number(orgId));
                    call.setNUMBER(4, new Number(storeId));
                    call.setNUMBER(5, new Number(wipEntityId));
                    call.setNUMBER(6, r.getCsAvailableQuantity());
                    call.registerOutParameter(7, OracleTypes.VARCHAR);

                    call.execute();

                    //Опасность только возрастет! Для всех выводих сообщений один тип
                    int num = call.getInt(1);
                    if (num == 1 && resType != OAException.ERROR)
                        resType = OAException.WARNING;
                    else if (num == 2) {
                        resType = OAException.ERROR;
                    }
                    if (call.getString(7) != null)
                        messList.add(call.getString(7));


                    Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                               CLASS_NAME + 
                                                               ".addSelectedItems", 
                                                               " Status row = " + 
                                                               call.getNUMBER(1).toString() + 
                                                               "" + 
                                                               call.getString(7), 
                                                               OAFwkConstants.PROCEDURE);

                    call.close();
                } catch (Exception e) {
                    e.printStackTrace();

                    Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                               CLASS_NAME + 
                                                               ".addSelectedItems", 
                                                               " Error!" + 
                                                               e.getMessage(), 
                                                               OAFwkConstants.PROCEDURE);

                    throw new OAException(e.getMessage(), OAException.ERROR);
                } finally {
                    try {
                        if (call != null) {
                            call.close();
                        }
                    } catch (Exception e) {
                        throw new OAException(e.getLocalizedMessage(), 
                                              OAException.ERROR);
                    }
                }
            }
        }
        rsIter.closeRowSetIterator();
        getTransaction().commit();

        //проверка если не выбрана ни одна позиция
        if (!flagSelectRow) {
            OAException mainMessage = 
                new OAException("XXPHA", "XXPHA_SN1041_NOT_SELECTED_ITEM", 
                                null, OAException.WARNING, null);
            returnMesList.add(mainMessage);
        }

        for (String mes: messList) {
            Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                       CLASS_NAME + ".addSelectedItems", 
                                                       "mes = " + mes, 
                                                       OAFwkConstants.PROCEDURE);
            OAException msg = new OAException(mes, resType);
            returnMesList.add(msg);
        }


        Sn1041Utils.getInstance().writeDiagnostics(this, 
                                                   CLASS_NAME + ".addSelectedItems", 
                                                   " - Ok!", 
                                                   OAFwkConstants.PROCEDURE);
        return returnMesList;
    }

    /**Container's getter for ActiveCartVO1
     */
    public ActiveCartVOImpl getActiveCartVO1() {
        return (ActiveCartVOImpl)findViewObject("ActiveCartVO1");
    }

    /**Container's getter for SubInvVO3
     */
    public SubInvVOImpl getSubInvVO3() {
        return (SubInvVOImpl)findViewObject("SubInvVO3");
    }

    /**Container's getter for ParametersVO1
     */
    public ParametersVOImpl getParametersVO1() {
        return (ParametersVOImpl)findViewObject("ParametersVO1");
    }

    /**Container's getter for RequisitionTypesEAMVO1
     */
    public RequisitionTypesEAMVOImpl getRequisitionTypesEAMVO1() {
        return (RequisitionTypesEAMVOImpl)findViewObject("RequisitionTypesEAMVO1");
    }
}
